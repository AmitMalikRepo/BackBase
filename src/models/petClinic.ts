/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists pet owners
         * @description Returns an array of pet owners.
         */
        get: operations["listOwners"];
        put?: never;
        /**
         * Adds a pet owner
         * @description Records the details of a new pet owner.
         */
        post: operations["addOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owners/{ownerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a pet owner by ID
         * @description Returns the pet owner or a 404 error.
         */
        get: operations["getOwner"];
        /**
         * Update a pet owner's details
         * @description Updates the pet owner record with the specified details.
         */
        put: operations["updateOwner"];
        post?: never;
        /**
         * Delete an owner by ID
         * @description Returns the owner or a 404 error.
         */
        delete: operations["deleteOwner"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owners/{ownerId}/pets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adds a pet to an owner
         * @description Records the details of a new pet.
         */
        post: operations["addPetToOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owners/{ownerId}/pets/{petId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a pet by ID
         * @description Returns the pet or a 404 error.
         */
        get: operations["getOwnersPet"];
        /**
         * Update a pet's details
         * @description Updates the pet record with the specified details.
         */
        put: operations["updateOwnersPet"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/owners/{ownerId}/pets/{petId}/visits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Adds a vet visit
         * @description Records the details of a new vet visit.
         */
        post: operations["addVisitToOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pettypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists pet types
         * @description Returns an array of pet types.
         */
        get: operations["listPetTypes"];
        put?: never;
        /**
         * Create a pet type
         * @description Creates a pet type .
         */
        post: operations["addPetType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pettypes/{petTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a pet type by ID
         * @description Returns the pet type or a 404 error.
         */
        get: operations["getPetType"];
        /**
         * Update a pet type by ID
         * @description Returns the pet type or a 404 error.
         */
        put: operations["updatePetType"];
        post?: never;
        /**
         * Delete a pet type by ID
         * @description Returns the pet type or a 404 error.
         */
        delete: operations["deletePetType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists pet
         * @description Returns an array of pet .
         */
        get: operations["listPets"];
        put?: never;
        /**
         * Create a pet
         * @description Creates a pet .
         */
        post: operations["addPet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pets/{petId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a pet by ID
         * @description Returns the pet  or a 404 error.
         */
        get: operations["getPet"];
        /**
         * Update a pet by ID
         * @description Returns the pet or a 404 error.
         */
        put: operations["updatePet"];
        post?: never;
        /**
         * Delete a pet by ID
         * @description Returns the pet or a 404 error.
         */
        delete: operations["deletePet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists visits
         * @description Returns an array of visit .
         */
        get: operations["listVisits"];
        put?: never;
        /**
         * Create a visit
         * @description Creates a visit.
         */
        post: operations["addVisit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visits/{visitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a visit by ID
         * @description Returns the visit or a 404 error.
         */
        get: operations["getVisit"];
        /**
         * Update a visit by ID
         * @description Returns the visit or a 404 error.
         */
        put: operations["updateVisit"];
        post?: never;
        /**
         * Delete a visit by ID
         * @description Returns the visit or a 404 error.
         */
        delete: operations["deleteVisit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/specialties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists specialties
         * @description Returns an array of specialty .
         */
        get: operations["listSpecialties"];
        put?: never;
        /**
         * Create a specialty
         * @description Creates a specialty .
         */
        post: operations["addSpecialty"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/specialties/{specialtyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specialty by ID
         * @description Returns the specialty or a 404 error.
         */
        get: operations["getSpecialty"];
        /**
         * Update a specialty by ID
         * @description Returns the specialty or a 404 error.
         */
        put: operations["updateSpecialty"];
        post?: never;
        /**
         * Delete a specialty by ID
         * @description Returns the specialty or a 404 error.
         */
        delete: operations["deleteSpecialty"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists vets
         * @description Returns an array of vets.
         */
        get: operations["listVets"];
        put?: never;
        /**
         * Create a Vet
         * @description Creates a vet .
         */
        post: operations["addVet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vets/{vetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a vet by ID
         * @description Returns the vet or a 404 error.
         */
        get: operations["getVet"];
        /**
         * Update a vet  by ID
         * @description Returns the vet or a 404 error.
         */
        put: operations["updateVet"];
        post?: never;
        /**
         * Delete a vet by ID
         * @description Returns the vet or a 404 error.
         */
        delete: operations["deleteVet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * REST Error
         * @description The schema for all error responses.
         */
        RestError: {
            /**
             * Status
             * Format: int32
             * @description The HTTP status code.
             * @example 400
             */
            readonly status: number;
            /**
             * Error
             * @description The short error message.
             * @example Bad Request
             */
            readonly error: string;
            /**
             * Path
             * Format: uri
             * @description The path of the URL for this request.
             * @example /api/owners
             */
            readonly path: string;
            /**
             * Timestamp
             * Format: date-time
             * @description The time the error occured.
             * @example 2019-08-21T21:41:46.158+0000
             */
            readonly timestamp: string;
            /**
             * Message
             * @description The long error message.
             * @example Request failed schema validation
             */
            readonly message: string;
            /**
             * Schema validation errors
             * @description Validation errors against the OpenAPI schema.
             */
            schemaValidationErrors: components["schemas"]["ValidationMessage"][];
            /**
             * Trace
             * @description The stacktrace for this error.
             * @example com.atlassian.oai.validator.springmvc.InvalidRequestException: ...
             */
            readonly trace?: string;
        };
        /**
         * Validation message
         * @description Messages describing a validation error.
         */
        ValidationMessage: {
            /**
             * Message
             * @description The valiation message.
             * @example [Path '/lastName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
             */
            readonly message: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * Specialty
         * @description Fields of specialty of vets.
         */
        Specialty: {
            /**
             * ID
             * Format: int32
             * @description The ID of the specialty.
             * @example 1
             */
            readonly id: number;
            /**
             * Name
             * @description The name of the specialty.
             * @example radiology
             */
            name: string;
        };
        /**
         * Owner fields
         * @description Editable fields of a pet owner.
         */
        OwnerFields: {
            /**
             * First name
             * @description The first name of the pet owner.
             * @example George
             */
            firstName: string;
            /**
             * Last name
             * @description The last name of the pet owner.
             * @example Franklin
             */
            lastName: string;
            /**
             * Address
             * @description The postal address of the pet owner.
             * @example 110 W. Liberty St.
             */
            address: string;
            /**
             * City
             * @description The city of the pet owner.
             * @example Madison
             */
            city: string;
            /**
             * Telephone number
             * @description The telephone number of the pet owner.
             * @example 6085551023
             */
            telephone: string;
        };
        /**
         * Owner
         * @description A pet owner.
         */
        Owner: components["schemas"]["OwnerFields"] & {
            /**
             * ID
             * Format: int32
             * @description The ID of the pet owner.
             * @example 1
             */
            readonly id?: number;
            /**
             * Pets
             * @description The pets owned by this individual including any booked vet visits.
             */
            readonly pets: components["schemas"]["Pet"][];
        };
        /**
         * Pet fields
         * @description Editable fields of a pet.
         */
        PetFields: {
            /**
             * Name
             * @description The name of the pet.
             * @example Leo
             */
            name: string;
            /**
             * Birth date
             * Format: date
             * @description The date of birth of the pet.
             * @example 2010-09-07
             */
            birthDate: string;
            type: components["schemas"]["PetType"];
        };
        /**
         * Pet
         * @description A pet.
         */
        Pet: components["schemas"]["PetFields"] & {
            /**
             * ID
             * Format: int32
             * @description The ID of the pet.
             * @example 1
             */
            readonly id: number;
            /**
             * Owner ID
             * Format: int32
             * @description The ID of the pet's owner.
             * @example 1
             */
            readonly ownerId?: number;
            /**
             * Visits
             * @description Vet visit bookings for this pet.
             */
            readonly visits: components["schemas"]["Visit"][];
        };
        /**
         * VetFields
         * @description Editable fields of a veterinarian.
         */
        VetFields: {
            /**
             * First name
             * @description The first name of the vet.
             * @example James
             */
            firstName: string;
            /**
             * Last name
             * @description The last name of the vet.
             * @example Carter
             */
            lastName: string;
            /**
             * Specialties
             * @description The specialties of the vet.
             */
            specialties: components["schemas"]["Specialty"][];
        };
        /**
         * Vet
         * @description A veterinarian.
         */
        Vet: WithRequired<components["schemas"]["VetFields"], "firstName" | "lastName" | "specialties"> & {
            /**
             * ID
             * Format: int32
             * @description The ID of the vet.
             * @example 1
             */
            readonly id: number;
        };
        /**
         * Visit fields
         * @description Editable fields of a vet visit.
         */
        VisitFields: {
            /**
             * Date
             * Format: date
             * @description The date of the visit.
             * @example 2013-01-01
             */
            date?: string;
            /**
             * Description
             * @description The description for the visit.
             * @example rabies shot
             */
            description: string;
        };
        /**
         * Visit
         * @description A booking for a vet visit.
         */
        Visit: components["schemas"]["VisitFields"] & {
            /**
             * ID
             * Format: int32
             * @description The ID of the visit.
             * @example 1
             */
            readonly id: number;
            /**
             * Pet ID
             * Format: int32
             * @description The ID of the pet.
             * @example 1
             */
            readonly petId?: number;
        };
        /**
         * PetType fields
         * @description Editable fields of a pet type.
         */
        PetTypeFields: {
            /**
             * Name
             * @description The name of the pet type.
             * @example cat
             */
            name: string;
        };
        /**
         * Pet type
         * @description A pet type.
         */
        PetType: components["schemas"]["PetTypeFields"] & {
            /**
             * ID
             * Format: int32
             * @description The ID of the pet type.
             * @example 1
             */
            readonly id: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listOwners: {
        parameters: {
            query?: {
                /** @description Last name. */
                lastName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Owner details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"][];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addOwner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The pet owner */
        requestBody: {
            content: {
                "application/json": components["schemas"]["OwnerFields"];
            };
        };
        responses: {
            /** @description The pet owner was sucessfully added. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getOwner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet owner. */
                ownerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Owner details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Owner not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updateOwner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet owner. */
                ownerId: number;
            };
            cookie?: never;
        };
        /** @description The pet owner details to use for the update. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["OwnerFields"];
            };
        };
        responses: {
            /** @description Update successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Owner not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    deleteOwner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the owner. */
                ownerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Owner details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Owner  not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addPetToOwner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet owner. */
                ownerId: number;
            };
            cookie?: never;
        };
        /** @description The details of the new pet. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PetFields"];
            };
        };
        responses: {
            /** @description The pet was sucessfully added. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getOwnersPet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet owner. */
                ownerId: number;
                /** @description The ID of the pet. */
                petId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updateOwnersPet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet owner. */
                ownerId: number;
                /** @description The ID of the pet. */
                petId: number;
            };
            cookie?: never;
        };
        /** @description The pet details to use for the update. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PetFields"];
            };
        };
        responses: {
            /** @description Update successful. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found for this owner. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addVisitToOwner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet owner. */
                ownerId: number;
                /** @description The ID of the pet. */
                petId: number;
            };
            cookie?: never;
        };
        /** @description The details of the new vet visit. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["VisitFields"];
            };
        };
        responses: {
            /** @description The vet visit was sucessfully added. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Visit"];
                };
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found for this owner. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    listPetTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet types found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PetType"][];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addPetType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The pet type */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PetType"];
            };
        };
        responses: {
            /** @description Pet type created successfully. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PetType"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet Type not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getPetType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet type. */
                petTypeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet type details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PetType"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet Type not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updatePetType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet type. */
                petTypeId: number;
            };
            cookie?: never;
        };
        /** @description The pet type */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PetType"];
            };
        };
        responses: {
            /** @description Pet type details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PetType"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet Type not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    deletePetType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet type. */
                petTypeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet type details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PetType"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet type not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    listPets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet types found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"][];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addPet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The pet */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Pet"];
            };
        };
        responses: {
            /** @description Pet type created successfully. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getPet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet. */
                petId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updatePet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet. */
                petId: number;
            };
            cookie?: never;
        };
        /** @description The pet */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Pet"];
            };
        };
        responses: {
            /** @description Pet details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    deletePet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the pet. */
                petId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pet details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Pet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    listVisits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description visits found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Visit"][];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addVisit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The visit */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Visit"];
            };
        };
        responses: {
            /** @description visit created successfully. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Visit"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Visit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getVisit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the visit. */
                visitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Visit details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Visit"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Visit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updateVisit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the visit. */
                visitId: number;
            };
            cookie?: never;
        };
        /** @description The visit */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Visit"];
            };
        };
        responses: {
            /** @description Visit details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Visit"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Visit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    deleteVisit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the visit. */
                visitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Visit details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Visit"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Visit not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    listSpecialties: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Specialties found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialty"][];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addSpecialty: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The specialty */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Specialty"];
            };
        };
        responses: {
            /** @description Specialty created successfully. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialty"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Specialty not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getSpecialty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the speciality. */
                specialtyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Specialty details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialty"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Specialty not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updateSpecialty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the specialty. */
                specialtyId: number;
            };
            cookie?: never;
        };
        /** @description The pet */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Specialty"];
            };
        };
        responses: {
            /** @description Specialty details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialty"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Specialty not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    deleteSpecialty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the specialty. */
                specialtyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Specialty details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialty"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Specialty not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    listVets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Vets found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vet"][];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    addVet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The vet */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Vet"];
            };
        };
        responses: {
            /** @description Vet created successfully. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Vet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    getVet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vet. */
                vetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Vet details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Vet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    updateVet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vet. */
                vetId: number;
            };
            cookie?: never;
        };
        /** @description The vet */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Vet"];
            };
        };
        responses: {
            /** @description Pet type details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Vet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
    deleteVet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the vet. */
                vetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Vet details found and returned. */
            200: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vet"];
                };
            };
            /** @description Not modified. */
            304: {
                headers: {
                    /** @description An ID for this version of the response. */
                    ETag?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Vet not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
            /** @description Server error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestError"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
